/*
 * Sematext Cloud API
 * API Explorer provides access and documentation for Sematext REST API. The REST API requires the API Key to be sent as part of `Authorization` header. E.g.: `Authorization : apiKey e5f18450-205a-48eb-8589-7d49edaea813`.
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.sematext.cloud.client;

import com.sematext.cloud.model.GenericMapBasedApiResponse;
import com.sematext.cloud.model.MailReportResponse;
import com.sematext.cloud.model.ReportInfo;
import com.sematext.cloud.model.SubscriptionDashboardDto;
import com.sematext.cloud.model.SubscriptionDto;
import com.sematext.cloud.model.SubscriptionResponse;
import com.sematext.cloud.model.SubscriptionsResponse;
import com.sematext.cloud.model.UpdateSubscriptionDto;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for SubscriptionsApi
 */
@Ignore
public class SubscriptionsApiTest {

    private final SubscriptionsApi api = new SubscriptionsApi();

    /**
     * Create App subscription
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createForAppUsingPOSTTest() throws Exception {
        SubscriptionDto body = null;
        Long appId = null;
        SubscriptionResponse response = api.createForAppUsingPOST(body, appId);

        // TODO: test validations
    }
    /**
     * Create dashboard subscription
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createForDashUsingPOSTTest() throws Exception {
        SubscriptionDashboardDto body = null;
        Long dashId = null;
        SubscriptionResponse response = api.createForDashUsingPOST(body, dashId);

        // TODO: test validations
    }
    /**
     * Delete subscription
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteUsingDELETE3Test() throws Exception {
        Long updateableSubscriptionId = null;
        GenericMapBasedApiResponse response = api.deleteUsingDELETE3(updateableSubscriptionId);

        // TODO: test validations
    }
    /**
     * Get subscriptions for an App
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listUsingGET3Test() throws Exception {
        Long appId = null;
        SubscriptionsResponse response = api.listUsingGET3(appId);

        // TODO: test validations
    }
    /**
     * Get current account&#x27;s subscriptions
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listUsingGET5Test() throws Exception {
        SubscriptionsResponse response = api.listUsingGET5();

        // TODO: test validations
    }
    /**
     * Email an App report
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void sendAppReportUsingPOST1Test() throws Exception {
        ReportInfo body = null;
        Long appId = null;
        MailReportResponse response = api.sendAppReportUsingPOST1(body, appId);

        // TODO: test validations
    }
    /**
     * Email a dashboard report
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void sendDashReportUsingPOSTTest() throws Exception {
        ReportInfo body = null;
        Long dashId = null;
        MailReportResponse response = api.sendDashReportUsingPOST(body, dashId);

        // TODO: test validations
    }
    /**
     * Toggle subscription status
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void toggleEnabledUsingPUTTest() throws Exception {
        UpdateSubscriptionDto body = null;
        Long updateableSubscriptionId = null;
        SubscriptionResponse response = api.toggleEnabledUsingPUT(body, updateableSubscriptionId);

        // TODO: test validations
    }
    /**
     * Update App subscription
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateForAppUsingPUTTest() throws Exception {
        SubscriptionDto body = null;
        Long appId = null;
        SubscriptionResponse response = api.updateForAppUsingPUT(body, appId);

        // TODO: test validations
    }
    /**
     * Update dashboard subscription
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateForDashUsingPUT1Test() throws Exception {
        SubscriptionDashboardDto body = null;
        Long dashId = null;
        SubscriptionResponse response = api.updateForDashUsingPUT1(body, dashId);

        // TODO: test validations
    }
}
