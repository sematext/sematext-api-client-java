/*
 * Sematext Cloud API
 * API Explorer provides access and documentation for Sematext REST API. The REST API requires the API Key to be sent as part of `Authorization` header. E.g.: `Authorization : apiKey e5f18450-205a-48eb-8589-7d49edaea813`.
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.sematext.cloud.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
/**
 * MinPeriodFeePeriod
 */


public class MinPeriodFeePeriod {
  @SerializedName("browserMonitors")
  private Integer browserMonitors = null;

  @SerializedName("discount")
  private BigDecimal discount = null;

  @SerializedName("fromDate")
  private OffsetDateTime fromDate = null;

  @SerializedName("httpMonitors")
  private Integer httpMonitors = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("minPeriodFeeAmount")
  private BigDecimal minPeriodFeeAmount = null;

  @SerializedName("overagePercentage")
  private BigDecimal overagePercentage = null;

  @SerializedName("planDataLimit")
  private Long planDataLimit = null;

  @SerializedName("toDate")
  private OffsetDateTime toDate = null;

  @SerializedName("usedPlan")
  private String usedPlan = null;

  @SerializedName("usedPlanPeriodFee")
  private BigDecimal usedPlanPeriodFee = null;

  public MinPeriodFeePeriod browserMonitors(Integer browserMonitors) {
    this.browserMonitors = browserMonitors;
    return this;
  }

   /**
   * Get browserMonitors
   * @return browserMonitors
  **/
  @Schema(description = "")
  public Integer getBrowserMonitors() {
    return browserMonitors;
  }

  public void setBrowserMonitors(Integer browserMonitors) {
    this.browserMonitors = browserMonitors;
  }

  public MinPeriodFeePeriod discount(BigDecimal discount) {
    this.discount = discount;
    return this;
  }

   /**
   * Get discount
   * @return discount
  **/
  @Schema(description = "")
  public BigDecimal getDiscount() {
    return discount;
  }

  public void setDiscount(BigDecimal discount) {
    this.discount = discount;
  }

  public MinPeriodFeePeriod fromDate(OffsetDateTime fromDate) {
    this.fromDate = fromDate;
    return this;
  }

   /**
   * Get fromDate
   * @return fromDate
  **/
  @Schema(description = "")
  public OffsetDateTime getFromDate() {
    return fromDate;
  }

  public void setFromDate(OffsetDateTime fromDate) {
    this.fromDate = fromDate;
  }

  public MinPeriodFeePeriod httpMonitors(Integer httpMonitors) {
    this.httpMonitors = httpMonitors;
    return this;
  }

   /**
   * Get httpMonitors
   * @return httpMonitors
  **/
  @Schema(description = "")
  public Integer getHttpMonitors() {
    return httpMonitors;
  }

  public void setHttpMonitors(Integer httpMonitors) {
    this.httpMonitors = httpMonitors;
  }

  public MinPeriodFeePeriod id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public MinPeriodFeePeriod minPeriodFeeAmount(BigDecimal minPeriodFeeAmount) {
    this.minPeriodFeeAmount = minPeriodFeeAmount;
    return this;
  }

   /**
   * Get minPeriodFeeAmount
   * @return minPeriodFeeAmount
  **/
  @Schema(description = "")
  public BigDecimal getMinPeriodFeeAmount() {
    return minPeriodFeeAmount;
  }

  public void setMinPeriodFeeAmount(BigDecimal minPeriodFeeAmount) {
    this.minPeriodFeeAmount = minPeriodFeeAmount;
  }

  public MinPeriodFeePeriod overagePercentage(BigDecimal overagePercentage) {
    this.overagePercentage = overagePercentage;
    return this;
  }

   /**
   * Get overagePercentage
   * @return overagePercentage
  **/
  @Schema(description = "")
  public BigDecimal getOveragePercentage() {
    return overagePercentage;
  }

  public void setOveragePercentage(BigDecimal overagePercentage) {
    this.overagePercentage = overagePercentage;
  }

  public MinPeriodFeePeriod planDataLimit(Long planDataLimit) {
    this.planDataLimit = planDataLimit;
    return this;
  }

   /**
   * Get planDataLimit
   * @return planDataLimit
  **/
  @Schema(description = "")
  public Long getPlanDataLimit() {
    return planDataLimit;
  }

  public void setPlanDataLimit(Long planDataLimit) {
    this.planDataLimit = planDataLimit;
  }

  public MinPeriodFeePeriod toDate(OffsetDateTime toDate) {
    this.toDate = toDate;
    return this;
  }

   /**
   * Get toDate
   * @return toDate
  **/
  @Schema(description = "")
  public OffsetDateTime getToDate() {
    return toDate;
  }

  public void setToDate(OffsetDateTime toDate) {
    this.toDate = toDate;
  }

  public MinPeriodFeePeriod usedPlan(String usedPlan) {
    this.usedPlan = usedPlan;
    return this;
  }

   /**
   * Get usedPlan
   * @return usedPlan
  **/
  @Schema(description = "")
  public String getUsedPlan() {
    return usedPlan;
  }

  public void setUsedPlan(String usedPlan) {
    this.usedPlan = usedPlan;
  }

  public MinPeriodFeePeriod usedPlanPeriodFee(BigDecimal usedPlanPeriodFee) {
    this.usedPlanPeriodFee = usedPlanPeriodFee;
    return this;
  }

   /**
   * Get usedPlanPeriodFee
   * @return usedPlanPeriodFee
  **/
  @Schema(description = "")
  public BigDecimal getUsedPlanPeriodFee() {
    return usedPlanPeriodFee;
  }

  public void setUsedPlanPeriodFee(BigDecimal usedPlanPeriodFee) {
    this.usedPlanPeriodFee = usedPlanPeriodFee;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MinPeriodFeePeriod minPeriodFeePeriod = (MinPeriodFeePeriod) o;
    return Objects.equals(this.browserMonitors, minPeriodFeePeriod.browserMonitors) &&
        Objects.equals(this.discount, minPeriodFeePeriod.discount) &&
        Objects.equals(this.fromDate, minPeriodFeePeriod.fromDate) &&
        Objects.equals(this.httpMonitors, minPeriodFeePeriod.httpMonitors) &&
        Objects.equals(this.id, minPeriodFeePeriod.id) &&
        Objects.equals(this.minPeriodFeeAmount, minPeriodFeePeriod.minPeriodFeeAmount) &&
        Objects.equals(this.overagePercentage, minPeriodFeePeriod.overagePercentage) &&
        Objects.equals(this.planDataLimit, minPeriodFeePeriod.planDataLimit) &&
        Objects.equals(this.toDate, minPeriodFeePeriod.toDate) &&
        Objects.equals(this.usedPlan, minPeriodFeePeriod.usedPlan) &&
        Objects.equals(this.usedPlanPeriodFee, minPeriodFeePeriod.usedPlanPeriodFee);
  }

  @Override
  public int hashCode() {
    return Objects.hash(browserMonitors, discount, fromDate, httpMonitors, id, minPeriodFeeAmount, overagePercentage, planDataLimit, toDate, usedPlan, usedPlanPeriodFee);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MinPeriodFeePeriod {\n");
    
    sb.append("    browserMonitors: ").append(toIndentedString(browserMonitors)).append("\n");
    sb.append("    discount: ").append(toIndentedString(discount)).append("\n");
    sb.append("    fromDate: ").append(toIndentedString(fromDate)).append("\n");
    sb.append("    httpMonitors: ").append(toIndentedString(httpMonitors)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    minPeriodFeeAmount: ").append(toIndentedString(minPeriodFeeAmount)).append("\n");
    sb.append("    overagePercentage: ").append(toIndentedString(overagePercentage)).append("\n");
    sb.append("    planDataLimit: ").append(toIndentedString(planDataLimit)).append("\n");
    sb.append("    toDate: ").append(toIndentedString(toDate)).append("\n");
    sb.append("    usedPlan: ").append(toIndentedString(usedPlan)).append("\n");
    sb.append("    usedPlanPeriodFee: ").append(toIndentedString(usedPlanPeriodFee)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
