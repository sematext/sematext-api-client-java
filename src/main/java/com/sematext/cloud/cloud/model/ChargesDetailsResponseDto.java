/*
 * Sematext Cloud API
 * API Explorer provides access and documentation for Sematext REST API. The REST API requires the API Key to be sent as part of `Authorization` header. E.g.: `Authorization : apiKey e5f18450-205a-48eb-8589-7d49edaea813`.
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.sematext.cloud.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.sematext.cloud.model.App;
import com.sematext.cloud.model.DayUsageData;
import com.sematext.cloud.model.MinPeriodFeePeriod;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
/**
 * ChargesDetailsResponseDto
 */


public class ChargesDetailsResponseDto {
  @SerializedName("app")
  private App app = null;

  /**
   * Gets or Sets chargeBase
   */
  @JsonAdapter(ChargeBaseEnum.Adapter.class)
  public enum ChargeBaseEnum {
    SUMMARIZED_USAGE("SUMMARIZED_USAGE"),
    MIN_MONTHLY_FEE("MIN_MONTHLY_FEE"),
    SUM_OF_DAILY_FEES("SUM_OF_DAILY_FEES"),
    TOTAL_MONTHLY_FEE("TOTAL_MONTHLY_FEE");

    private String value;

    ChargeBaseEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ChargeBaseEnum fromValue(String input) {
      for (ChargeBaseEnum b : ChargeBaseEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ChargeBaseEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChargeBaseEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ChargeBaseEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ChargeBaseEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("chargeBase")
  private ChargeBaseEnum chargeBase = null;

  @SerializedName("dayUsageData")
  private List<DayUsageData> dayUsageData = null;

  @SerializedName("monthlyFeeAmount")
  private BigDecimal monthlyFeeAmount = null;

  @SerializedName("periodFeePeriods")
  private List<MinPeriodFeePeriod> periodFeePeriods = null;

  @SerializedName("totalAmount")
  private BigDecimal totalAmount = null;

  @SerializedName("usageAmount")
  private BigDecimal usageAmount = null;

  public ChargesDetailsResponseDto app(App app) {
    this.app = app;
    return this;
  }

   /**
   * Get app
   * @return app
  **/
  @Schema(description = "")
  public App getApp() {
    return app;
  }

  public void setApp(App app) {
    this.app = app;
  }

  public ChargesDetailsResponseDto chargeBase(ChargeBaseEnum chargeBase) {
    this.chargeBase = chargeBase;
    return this;
  }

   /**
   * Get chargeBase
   * @return chargeBase
  **/
  @Schema(description = "")
  public ChargeBaseEnum getChargeBase() {
    return chargeBase;
  }

  public void setChargeBase(ChargeBaseEnum chargeBase) {
    this.chargeBase = chargeBase;
  }

  public ChargesDetailsResponseDto dayUsageData(List<DayUsageData> dayUsageData) {
    this.dayUsageData = dayUsageData;
    return this;
  }

  public ChargesDetailsResponseDto addDayUsageDataItem(DayUsageData dayUsageDataItem) {
    if (this.dayUsageData == null) {
      this.dayUsageData = new ArrayList<>();
    }
    this.dayUsageData.add(dayUsageDataItem);
    return this;
  }

   /**
   * Get dayUsageData
   * @return dayUsageData
  **/
  @Schema(description = "")
  public List<DayUsageData> getDayUsageData() {
    return dayUsageData;
  }

  public void setDayUsageData(List<DayUsageData> dayUsageData) {
    this.dayUsageData = dayUsageData;
  }

  public ChargesDetailsResponseDto monthlyFeeAmount(BigDecimal monthlyFeeAmount) {
    this.monthlyFeeAmount = monthlyFeeAmount;
    return this;
  }

   /**
   * Get monthlyFeeAmount
   * @return monthlyFeeAmount
  **/
  @Schema(description = "")
  public BigDecimal getMonthlyFeeAmount() {
    return monthlyFeeAmount;
  }

  public void setMonthlyFeeAmount(BigDecimal monthlyFeeAmount) {
    this.monthlyFeeAmount = monthlyFeeAmount;
  }

  public ChargesDetailsResponseDto periodFeePeriods(List<MinPeriodFeePeriod> periodFeePeriods) {
    this.periodFeePeriods = periodFeePeriods;
    return this;
  }

  public ChargesDetailsResponseDto addPeriodFeePeriodsItem(MinPeriodFeePeriod periodFeePeriodsItem) {
    if (this.periodFeePeriods == null) {
      this.periodFeePeriods = new ArrayList<>();
    }
    this.periodFeePeriods.add(periodFeePeriodsItem);
    return this;
  }

   /**
   * Get periodFeePeriods
   * @return periodFeePeriods
  **/
  @Schema(description = "")
  public List<MinPeriodFeePeriod> getPeriodFeePeriods() {
    return periodFeePeriods;
  }

  public void setPeriodFeePeriods(List<MinPeriodFeePeriod> periodFeePeriods) {
    this.periodFeePeriods = periodFeePeriods;
  }

  public ChargesDetailsResponseDto totalAmount(BigDecimal totalAmount) {
    this.totalAmount = totalAmount;
    return this;
  }

   /**
   * Get totalAmount
   * @return totalAmount
  **/
  @Schema(description = "")
  public BigDecimal getTotalAmount() {
    return totalAmount;
  }

  public void setTotalAmount(BigDecimal totalAmount) {
    this.totalAmount = totalAmount;
  }

  public ChargesDetailsResponseDto usageAmount(BigDecimal usageAmount) {
    this.usageAmount = usageAmount;
    return this;
  }

   /**
   * Get usageAmount
   * @return usageAmount
  **/
  @Schema(description = "")
  public BigDecimal getUsageAmount() {
    return usageAmount;
  }

  public void setUsageAmount(BigDecimal usageAmount) {
    this.usageAmount = usageAmount;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChargesDetailsResponseDto chargesDetailsResponseDto = (ChargesDetailsResponseDto) o;
    return Objects.equals(this.app, chargesDetailsResponseDto.app) &&
        Objects.equals(this.chargeBase, chargesDetailsResponseDto.chargeBase) &&
        Objects.equals(this.dayUsageData, chargesDetailsResponseDto.dayUsageData) &&
        Objects.equals(this.monthlyFeeAmount, chargesDetailsResponseDto.monthlyFeeAmount) &&
        Objects.equals(this.periodFeePeriods, chargesDetailsResponseDto.periodFeePeriods) &&
        Objects.equals(this.totalAmount, chargesDetailsResponseDto.totalAmount) &&
        Objects.equals(this.usageAmount, chargesDetailsResponseDto.usageAmount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(app, chargeBase, dayUsageData, monthlyFeeAmount, periodFeePeriods, totalAmount, usageAmount);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChargesDetailsResponseDto {\n");
    
    sb.append("    app: ").append(toIndentedString(app)).append("\n");
    sb.append("    chargeBase: ").append(toIndentedString(chargeBase)).append("\n");
    sb.append("    dayUsageData: ").append(toIndentedString(dayUsageData)).append("\n");
    sb.append("    monthlyFeeAmount: ").append(toIndentedString(monthlyFeeAmount)).append("\n");
    sb.append("    periodFeePeriods: ").append(toIndentedString(periodFeePeriods)).append("\n");
    sb.append("    totalAmount: ").append(toIndentedString(totalAmount)).append("\n");
    sb.append("    usageAmount: ").append(toIndentedString(usageAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
