/*
 * Sematext Cloud API
 * API Explorer provides access and documentation for Sematext REST API. The REST API requires the API Key to be sent as part of `Authorization` header. E.g.: `Authorization : apiKey e5f18450-205a-48eb-8589-7d49edaea813`.
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sematext.stcloud.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.sematext.stcloud.model.App;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;

/**
 * Invitation
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-05-05T00:52:46.095+12:00")
public class Invitation {
  @SerializedName("app")
  private App app = null;

  @SerializedName("apps")
  private List<App> apps = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("inviteDate")
  private OffsetDateTime inviteDate = null;

  /**
   * Gets or Sets inviteStatus
   */
  @JsonAdapter(InviteStatusEnum.Adapter.class)
  public enum InviteStatusEnum {
    PENDING("PENDING"),
    
    ACCEPTED("ACCEPTED"),
    
    CANCELLED("CANCELLED"),
    
    DECLINED("DECLINED");

    private String value;

    InviteStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InviteStatusEnum fromValue(String text) {
      for (InviteStatusEnum b : InviteStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<InviteStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InviteStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InviteStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return InviteStatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("inviteStatus")
  private InviteStatusEnum inviteStatus = null;

  @SerializedName("inviteeEmail")
  private String inviteeEmail = null;

  /**
   * Gets or Sets inviteeRole
   */
  @JsonAdapter(InviteeRoleEnum.Adapter.class)
  public enum InviteeRoleEnum {
    SUPER_USER("SUPER_USER"),
    
    OWNER("OWNER"),
    
    ADMIN("ADMIN"),
    
    USER("USER"),
    
    DEMO("DEMO"),
    
    ANONYMOUS("ANONYMOUS");

    private String value;

    InviteeRoleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InviteeRoleEnum fromValue(String text) {
      for (InviteeRoleEnum b : InviteeRoleEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<InviteeRoleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InviteeRoleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InviteeRoleEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return InviteeRoleEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("inviteeRole")
  private InviteeRoleEnum inviteeRole = null;

  /**
   * Gets or Sets inviteeStatus
   */
  @JsonAdapter(InviteeStatusEnum.Adapter.class)
  public enum InviteeStatusEnum {
    INACTIVE("INACTIVE"),
    
    ACTIVE("ACTIVE");

    private String value;

    InviteeStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InviteeStatusEnum fromValue(String text) {
      for (InviteeStatusEnum b : InviteeStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<InviteeStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InviteeStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InviteeStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return InviteeStatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("inviteeStatus")
  private InviteeStatusEnum inviteeStatus = null;

  @SerializedName("inviterEmail")
  private String inviterEmail = null;

  @SerializedName("uuid")
  private String uuid = null;

  public Invitation app(App app) {
    this.app = app;
    return this;
  }

   /**
   * For invite request, only app.id needs to be set.
   * @return app
  **/
  @ApiModelProperty(value = "For invite request, only app.id needs to be set.")
  public App getApp() {
    return app;
  }

  public void setApp(App app) {
    this.app = app;
  }

  public Invitation apps(List<App> apps) {
    this.apps = apps;
    return this;
  }

  public Invitation addAppsItem(App appsItem) {
    if (this.apps == null) {
      this.apps = new ArrayList<>();
    }
    this.apps.add(appsItem);
    return this;
  }

   /**
   * For invite request, only apps.id needs to be set.
   * @return apps
  **/
  @ApiModelProperty(value = "For invite request, only apps.id needs to be set.")
  public List<App> getApps() {
    return apps;
  }

  public void setApps(List<App> apps) {
    this.apps = apps;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(value = "")
  public Long getId() {
    return id;
  }

   /**
   * Get inviteDate
   * @return inviteDate
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getInviteDate() {
    return inviteDate;
  }

   /**
   * Get inviteStatus
   * @return inviteStatus
  **/
  @ApiModelProperty(value = "")
  public InviteStatusEnum getInviteStatus() {
    return inviteStatus;
  }

  public Invitation inviteeEmail(String inviteeEmail) {
    this.inviteeEmail = inviteeEmail;
    return this;
  }

   /**
   * Get inviteeEmail
   * @return inviteeEmail
  **/
  @ApiModelProperty(example = "guest@sematext.com", value = "")
  public String getInviteeEmail() {
    return inviteeEmail;
  }

  public void setInviteeEmail(String inviteeEmail) {
    this.inviteeEmail = inviteeEmail;
  }

  public Invitation inviteeRole(InviteeRoleEnum inviteeRole) {
    this.inviteeRole = inviteeRole;
    return this;
  }

   /**
   * Get inviteeRole
   * @return inviteeRole
  **/
  @ApiModelProperty(example = "DEMO", value = "")
  public InviteeRoleEnum getInviteeRole() {
    return inviteeRole;
  }

  public void setInviteeRole(InviteeRoleEnum inviteeRole) {
    this.inviteeRole = inviteeRole;
  }

   /**
   * Get inviteeStatus
   * @return inviteeStatus
  **/
  @ApiModelProperty(example = "ACTIVE", value = "")
  public InviteeStatusEnum getInviteeStatus() {
    return inviteeStatus;
  }

   /**
   * Get inviterEmail
   * @return inviterEmail
  **/
  @ApiModelProperty(value = "")
  public String getInviterEmail() {
    return inviterEmail;
  }

   /**
   * Get uuid
   * @return uuid
  **/
  @ApiModelProperty(value = "")
  public String getUuid() {
    return uuid;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Invitation invitation = (Invitation) o;
    return Objects.equals(this.app, invitation.app) &&
        Objects.equals(this.apps, invitation.apps) &&
        Objects.equals(this.id, invitation.id) &&
        Objects.equals(this.inviteDate, invitation.inviteDate) &&
        Objects.equals(this.inviteStatus, invitation.inviteStatus) &&
        Objects.equals(this.inviteeEmail, invitation.inviteeEmail) &&
        Objects.equals(this.inviteeRole, invitation.inviteeRole) &&
        Objects.equals(this.inviteeStatus, invitation.inviteeStatus) &&
        Objects.equals(this.inviterEmail, invitation.inviterEmail) &&
        Objects.equals(this.uuid, invitation.uuid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(app, apps, id, inviteDate, inviteStatus, inviteeEmail, inviteeRole, inviteeStatus, inviterEmail, uuid);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Invitation {\n");
    
    sb.append("    app: ").append(toIndentedString(app)).append("\n");
    sb.append("    apps: ").append(toIndentedString(apps)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inviteDate: ").append(toIndentedString(inviteDate)).append("\n");
    sb.append("    inviteStatus: ").append(toIndentedString(inviteStatus)).append("\n");
    sb.append("    inviteeEmail: ").append(toIndentedString(inviteeEmail)).append("\n");
    sb.append("    inviteeRole: ").append(toIndentedString(inviteeRole)).append("\n");
    sb.append("    inviteeStatus: ").append(toIndentedString(inviteeStatus)).append("\n");
    sb.append("    inviterEmail: ").append(toIndentedString(inviterEmail)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

